#! /bin/csh -f
set arch = `uname -s`
echo "This seems to be a " $arch " architecture"
set ofile = config.mk.${arch}

#
# Get some useful stuff from conf/Makefile.whatever
#
echo "Checking for conf/Makefile.${arch}"
if ( ! -e conf/Makefile.${arch} ) then
  echo "I can't find conf/Makefile.${arch} "
  echo "You will have to create an appropriate version."
  exit -1
endif
echo "Found it; scanning it for XLIBS and CFLAGS"
set xlibs = `grep XLIBS conf/Makefile.${arch}`
shift xlibs
shift xlibs
set gllibs = `grep GLLIBS conf/Makefile.${arch}`
shift gllibs
shift gllibs
set cflags = `grep CFLAGS conf/Makefile.${arch}`
shift cflags
shift cflags

# Generate config.mk.${arch}
echo "# This file generated by configure on " `date` > $ofile
echo " " >> $ofile

#
# Avoid the obsolete SDSC Imtools library.
#
cat >> $ofile << %%EOF%%
# The following lines avoid the obsolete SDSC Imtools library.
CFLAGS += -DAVOID_IMTOOLS

%%EOF%%

#
# Check for OpenGL
#
echo "Checking for OpenGL..."
set incl_gl = 1
cat > tmp_config_gl_test.c << %%EOF%%
#include <X11/Intrinsic.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glx.h>
int main() {
  static int attrs[]= { None };
  Display* dpy= XOpenDisplay(0);
  XVisualInfo *vi= glXChooseVisual(dpy, DefaultScreen(dpy), attrs);
  GLXContext cx= glXCreateContext(dpy, vi, 0, GL_TRUE);
  GLUquadricObj* q= gluNewQuadric();
}
%%EOF%%

( cc -o tmp_config_gl_test $cflags tmp_config_gl_test.c \
    $gllibs $xlibs -lm )
if ( ! $status ) then
  echo "GL libraries and includes are where I expected."
else
  echo "GL libraries or includes are not where I expected."
  set incl_gl = 0
endif

if ( $incl_gl ) then
echo "GL is available."

cat >> $ofile << %%EOF%%
# The following lines tell the build process that GL is available
CFLAGS += -DINCL_GL -DUSE_OPENGL
LIBS += \${GLLIBS} \${XLIBS}

%%EOF%%

else

  echo 'GL is *not* available.'

endif
rm -f tmp_config_gl_test*

#
# Check for X
#
echo "Checking for X..."
set incl_xpainter = 1
cat > tmp_config_X_test.c << %%EOF%%
#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Intrinsic.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>
#include <X11/Xmu/StdCmap.h>
#include <Xm/Xm.h>
#include <Xm/MainW.h>
int main() {
  int zero= 0;
  Widget w= XtInitialize("junk","junk",NULL,0,&zero,NULL);
}
%%EOF%%

( cc -o tmp_config_X_test $cflags tmp_config_X_test.c $xlibs >& /dev/null )
if ( ! $status ) then
  echo "X libraries and includes are where I expected."
else
  echo "X libraries or includes are not where I expected."
  set incl_xpainter = 0
endif

if ( $incl_xpainter ) then
echo "X is available."

cat >> $ofile << %%EOF%%
# The following lines tell the build process that X is available
CFLAGS += -DINCL_X
%%EOF%%
if ( ! $incl_gl ) then
cat >> $ofile << %%EOF%%
LIBS += \${XLIBS}

%%EOF%%
else
cat >> $ofile << %%EOF%%

%%EOF%%
endif

else

  echo 'X is *not* available.'

endif
rm -f tmp_config_X_test*

#
# Check for Chromium
#
if (! $incl_gl) goto skip_chromium
echo "Since GL is included, checking for Chromium"
set incl_cr = 0
foreach dirname ( /include /usr/include /usr/local/include \
    /usr/local/cr /usr/statlocal/include /usr/statlocal/cr \
    /usr/freeware/include /usr/freeware/cr ${HOME}/cr/include \
    ${HOME}/cr/cr/include ${HOME}/include )
  if ( -e ${dirname}/chromium.h ) then
    set incl_cr = 1
    break
  endif
end  

if ( $incl_cr ) then
  echo "Found ${dirname}/chromium.h; setting up for Chromium"
cat >> $ofile << %%EOF%%
# The following lines tell the build process that Chromium is available.
CFLAGS += -I${dirname} -DCHROMIUM  

%%EOF%%
else
  echo "chromium.h was not found, so Chromium support will be omitted."
endif

skip_chromium:

#
# Check for Tcl
#
echo "Checking for Tcl"
set incl_tcl = 0
set tcl_config_loc = "unknown"
set tcl_incl_loc = "unknown"
set tcl_libs = "unknown"
foreach dirname ( /usr/lib /usr/local/lib ${HOME}/lib )
  if ( -e ${dirname}/tclConfig.sh ) then
    set tcl_config_loc = ${dirname}/tclConfig.sh
    set tcl_dbgx = `sh -c 'source '$tcl_config_loc' ; echo $TCL_DBGX'`
    set tcl_libs = `sh -c 'source '$tcl_config_loc' ; echo $TCL_LIB_SPEC'`
    set tcl_libs = `echo $tcl_libs | sed 's/$TCL_DBGX/'${tcl_dbgx}'/g'`
    set tcl_incl_loc = `sh -c 'source '$tcl_config_loc' ; echo $TCL_INCLUDE_SPEC'`
    break
  endif
end  

if ( "$tcl_config_loc" != "unknown" && "$tcl_incl_loc" != "unknown" \
     && "$tcl_libs" != "unknown" ) then
  set incl_tcl = 1
endif

if ( ! $incl_tcl ) then
  echo "Tcl libraries were not found! "
  goto skip_tcl
endif

echo "Found ${tcl_config_loc}, which claims:"
echo "   tcl.h is found via $tcl_incl_loc"
echo "   tcl libraries are linked via $tcl_libs"
echo "Testing my guesses for location of Tcl"
cat > tmp_config_tcl_test.c << %%EOF%%
#include <tcl.h>

int Tcl_AppInit(Tcl_Interp *interp)
{
  if (Tcl_Init(interp) == TCL_ERROR) {
    return TCL_ERROR;
  }

  return TCL_OK;
}

int main(int argc, char* argv[]) {
  extern char *optarg;
  extern int optind;
  Tcl_Main(argc, argv, Tcl_AppInit);
}
%%EOF%%

( cc -o tmp_config_tcl_test $cflags tmp_config_tcl_test.c $tcl_incl_loc \
  $tcl_libs -lm >& /dev/null )
if ( ! $status ) then
  echo "Tcl libraries and includes are where I expected."
else
  echo "Tcl libraries or includes are not where I expected."
  set incl_tcl = 0
endif

if ( $incl_tcl ) then
echo "Tcl is available."

cat >> $ofile << %%EOF%%
# The following lines tell the build process that Tcl is available
CFLAGS += -DINCL_TCL ${tcl_incl_loc}
LIBS += ${tcl_libs}
BUILD_EXES += \$B/starsplatter

%%EOF%%

else

  echo 'Tcl is *not* available.'

endif
rm -f tmp_config_tcl_test*

skip_tcl:

#
# Check for Python
#
echo "Testing for Python"

set python_exe = none
set words = ` which python2`
if ( ${#words} == 1 ) then
  echo 'Found python2'
  set python_exe = python2
else
  set words = `which python`
  if ( ${#words} == 1 ) then
    echo 'Found python'
    set python_exe = python
  endif
endif
if ( $python_exe != none ) then
  set python_inc_loc = \
   `${python_exe} -c 'import sys; print sys.prefix+"/include/python%s"%sys.version[:3]'`
  echo "Python.h should be in " $python_inc_loc
endif

if ( $python_exe != none ) then
echo "Python is available."

cat >> $ofile << %%EOF%%
# The following lines tell the build process that Python is available
CFLAGS += -DINCL_PYTHON -I${python_inc_loc}
SWIGFLAGS += -python
BUILD_LIBS += \$L/_starsplatter.\${SHR_EXT} \$L/_cball.\${SHR_EXT}
BUILD_EXES += \$B/starsplatter.py \$B/ssplat_gui.py \$B/cball.py

%%EOF%%

else

  echo 'Python is *not* available.'

endif

skip_python:

#
# Check for SWIG
#
echo "Testing for SWIG"
set words = `which swig`
if ( ${#words} == 1 ) then
  echo 'SWIG found! '
  set use_swig = 1
else
  echo 'SWIG is not in your path.'
  set use_swig = 0
endif

if ( $use_swig ) then
cat >> $ofile << %%EOF%%
# The following lines tell the build process that SWIG is available
USE_SWIG = 1
SWIG = `which swig`

%%EOF%%
else
cat >> $ofile << %%EOF%%
# The following lines tell the build process that SWIG is not available
USE_SWIG = 0
SWIG = @echo '%%% SWIG needed but unavailable %%%' ; exit -1 ; echo

%%EOF%%
endif

#
# Check for libpng
#
echo "Checking for png library"
set incl_png = 0
set png_incl_loc = "unknown"
set png_libs = "unknown"
foreach dirname ( /usr/include /usr/local/include ${HOME}/include )
  if ( -e ${dirname}/png.h ) then
    set png_incl_loc = -I$dirname
    break
  endif
end

# lib locs in default search path
foreach dirname ( /usr/lib /usr/local/lib )
  if ( -e ${dirname}/libpng.so ) then
    set png_libs = -lpng
    break
  endif
end  
# other lib locs
foreach dirname ( ${HOME}/lib )
  if ( -e ${dirname}/libpng.so ) then
    set png_libs = -L$dirname -lpng
    break
  endif
end  

if ( "$png_incl_loc" != "unknown" && "$png_libs" != "unknown" ) then
  set incl_png = 1
endif

if ( ! $incl_png ) then
  echo "Png libraries were not found! "
  goto skip_png
endif

echo "png.h is found via $png_incl_loc"
echo "png libraries are linked via $png_libs"
echo "Testing my guesses for location of Png"
cat > tmp_config_png_test.c << %%EOF%%
#include <png.h>

int main()
{
    png_structp png_ptr= 
      png_create_write_struct(PNG_LIBPNG_VER_STRING,NULL,NULL,NULL);
    png_infop info_ptr= png_create_info_struct(png_ptr);
    png_destroy_write_struct(&png_ptr, &info_ptr);
}
%%EOF%%

( cc -o tmp_config_png_test $cflags tmp_config_png_test.c $png_incl_loc \
  $png_libs -lm >& /dev/null )
if ( ! $status ) then
  echo "Png libraries and includes are where I expected."
else
  echo "Png libraries or includes are not where I expected."
  set incl_png = 0
endif

if ( $incl_png ) then
echo "Png is available."

cat >> $ofile << %%EOF%%
# The following lines tell the build process that Png is available
CFLAGS += -DINCL_PNG ${png_incl_loc}
LIBS += ${png_libs}

%%EOF%%

else

  echo 'Png is *not* available.'

endif
#rm -f tmp_config_png_test*

skip_png:

