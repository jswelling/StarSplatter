# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
This module provides tools for rendering particles, in particular the
results of SPH numerical simulations.  The StarBunch class embodies a 
collection of particles; the StarSplatter class provides mechanisms to 
render sets of these collections.  Some other classes are provided to 
manipulate rendering geometry and rendered images.
"""

import _starsplatter
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class gPoint(_object):
    """Proxy of C++ gPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float xin, float yin, float zin) -> gPoint
        __init__(self, float xin, float yin, float zin, float win) -> gPoint
        __init__(self) -> gPoint
        """
        this = _starsplatter.new_gPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args):
        """x(self) -> float"""
        return _starsplatter.gPoint_x(*args)

    def y(*args):
        """y(self) -> float"""
        return _starsplatter.gPoint_y(*args)

    def z(*args):
        """z(self) -> float"""
        return _starsplatter.gPoint_z(*args)

    def w(*args):
        """w(self) -> float"""
        return _starsplatter.gPoint_w(*args)

    def homogenize(*args):
        """homogenize(self)"""
        return _starsplatter.gPoint_homogenize(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _starsplatter.gPoint___str__(*args)

    __swig_destroy__ = _starsplatter.delete_gPoint
    __del__ = lambda self : None;
gPoint_swigregister = _starsplatter.gPoint_swigregister
gPoint_swigregister(gPoint)

class gVector(_object):
    """Proxy of C++ gVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float xin, float yin, float zin) -> gVector
        __init__(self, float xin, float yin, float zin, float win) -> gVector
        __init__(self) -> gVector
        """
        this = _starsplatter.new_gVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args):
        """x(self) -> float"""
        return _starsplatter.gVector_x(*args)

    def y(*args):
        """y(self) -> float"""
        return _starsplatter.gVector_y(*args)

    def z(*args):
        """z(self) -> float"""
        return _starsplatter.gVector_z(*args)

    def w(*args):
        """w(self) -> float"""
        return _starsplatter.gVector_w(*args)

    def homogenize(*args):
        """homogenize(self)"""
        return _starsplatter.gVector_homogenize(*args)

    def lengthsqr(*args):
        """lengthsqr(self) -> float"""
        return _starsplatter.gVector_lengthsqr(*args)

    def length(*args):
        """length(self) -> float"""
        return _starsplatter.gVector_length(*args)

    def normalize(*args):
        """normalize(self)"""
        return _starsplatter.gVector_normalize(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _starsplatter.gVector___str__(*args)

    __swig_destroy__ = _starsplatter.delete_gVector
    __del__ = lambda self : None;
gVector_swigregister = _starsplatter.gVector_swigregister
gVector_swigregister(gVector)

class gColor(_object):
    """Proxy of C++ gColor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float rin, float gin, float bin, float ain=1.0) -> gColor
        __init__(self, float rin, float gin, float bin) -> gColor
        __init__(self) -> gColor
        __init__(self, gColor other) -> gColor
        """
        this = _starsplatter.new_gColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def r(*args):
        """r(self) -> float"""
        return _starsplatter.gColor_r(*args)

    def g(*args):
        """g(self) -> float"""
        return _starsplatter.gColor_g(*args)

    def b(*args):
        """b(self) -> float"""
        return _starsplatter.gColor_b(*args)

    def a(*args):
        """a(self) -> float"""
        return _starsplatter.gColor_a(*args)

    def ir(*args):
        """ir(self) -> int"""
        return _starsplatter.gColor_ir(*args)

    def ig(*args):
        """ig(self) -> int"""
        return _starsplatter.gColor_ig(*args)

    def ib(*args):
        """ib(self) -> int"""
        return _starsplatter.gColor_ib(*args)

    def ia(*args):
        """ia(self) -> int"""
        return _starsplatter.gColor_ia(*args)

    def clamp(*args):
        """clamp(self) -> gColor"""
        return _starsplatter.gColor_clamp(*args)

    def clamp_alpha(*args):
        """clamp_alpha(self) -> gColor"""
        return _starsplatter.gColor_clamp_alpha(*args)

    def add_under(*args):
        """add_under(self, gColor other)"""
        return _starsplatter.gColor_add_under(*args)

    def add_noclamp(*args):
        """add_noclamp(self, gColor other)"""
        return _starsplatter.gColor_add_noclamp(*args)

    def subtract_noclamp(*args):
        """subtract_noclamp(self, gColor other)"""
        return _starsplatter.gColor_subtract_noclamp(*args)

    def mult_noclamp(*args):
        """mult_noclamp(self, float fac)"""
        return _starsplatter.gColor_mult_noclamp(*args)

    def scale_by_alpha(*args):
        """scale_by_alpha(self)"""
        return _starsplatter.gColor_scale_by_alpha(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _starsplatter.gColor___str__(*args)

    __swig_destroy__ = _starsplatter.delete_gColor
    __del__ = lambda self : None;
gColor_swigregister = _starsplatter.gColor_swigregister
gColor_swigregister(gColor)

class gBColor(_object):
    """Proxy of C++ gBColor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gBColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gBColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float rin, float gin, float bin, float ain=1.0) -> gBColor
        __init__(self, float rin, float gin, float bin) -> gBColor
        __init__(self, int rin, int gin, int bin, int ain=255) -> gBColor
        __init__(self, int rin, int gin, int bin) -> gBColor
        __init__(self) -> gBColor
        __init__(self, gColor other) -> gBColor
        """
        this = _starsplatter.new_gBColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args):
        """clear(self)"""
        return _starsplatter.gBColor_clear(*args)

    def r(*args):
        """r(self) -> float"""
        return _starsplatter.gBColor_r(*args)

    def g(*args):
        """g(self) -> float"""
        return _starsplatter.gBColor_g(*args)

    def b(*args):
        """b(self) -> float"""
        return _starsplatter.gBColor_b(*args)

    def a(*args):
        """a(self) -> float"""
        return _starsplatter.gBColor_a(*args)

    def ir(*args):
        """ir(self) -> int"""
        return _starsplatter.gBColor_ir(*args)

    def ig(*args):
        """ig(self) -> int"""
        return _starsplatter.gBColor_ig(*args)

    def ib(*args):
        """ib(self) -> int"""
        return _starsplatter.gBColor_ib(*args)

    def ia(*args):
        """ia(self) -> int"""
        return _starsplatter.gBColor_ia(*args)

    def __eq__(*args):
        """__eq__(self, gBColor other) -> int"""
        return _starsplatter.gBColor___eq__(*args)

    def __ne__(*args):
        """__ne__(self, gBColor other) -> int"""
        return _starsplatter.gBColor___ne__(*args)

    def __mul__(*args):
        """__mul__(self, float fac) -> gBColor"""
        return _starsplatter.gBColor___mul__(*args)

    def __add__(*args):
        """__add__(self, gBColor other) -> gBColor"""
        return _starsplatter.gBColor___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, gBColor other) -> gBColor"""
        return _starsplatter.gBColor___iadd__(*args)

    def __imul__(*args):
        """__imul__(self, float factor) -> gBColor"""
        return _starsplatter.gBColor___imul__(*args)

    def alpha_weighted(*args):
        """alpha_weighted(self) -> gBColor"""
        return _starsplatter.gBColor_alpha_weighted(*args)

    def bytes(*args):
        """bytes(self) -> unsigned char"""
        return _starsplatter.gBColor_bytes(*args)

    def scale_alpha(*args):
        """scale_alpha(self, float factor) -> gBColor"""
        return _starsplatter.gBColor_scale_alpha(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _starsplatter.gBColor___str__(*args)

    __swig_destroy__ = _starsplatter.delete_gBColor
    __del__ = lambda self : None;
gBColor_swigregister = _starsplatter.gBColor_swigregister
gBColor_swigregister(gBColor)

class gTransfm(_object):
    """Proxy of C++ gTransfm class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gTransfm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gTransfm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gTransfm
        __init__(self, float data_in) -> gTransfm
        __init__(self, gTransfm a) -> gTransfm
        """
        this = _starsplatter.new_gTransfm(*args)
        try: self.this.append(this)
        except: self.this = this
    def scale(*args):
        """
        scale(float val) -> gTransfm
        scale(float xval, float yval, float zval) -> gTransfm
        """
        return _starsplatter.gTransfm_scale(*args)

    if _newclass:scale = staticmethod(scale)
    __swig_getmethods__["scale"] = lambda x: scale
    def rotation(*args):
        """rotation(gVector axis, float angle) -> gTransfm"""
        return _starsplatter.gTransfm_rotation(*args)

    if _newclass:rotation = staticmethod(rotation)
    __swig_getmethods__["rotation"] = lambda x: rotation
    def translation(*args):
        """translation(float x, float y, float z) -> gTransfm"""
        return _starsplatter.gTransfm_translation(*args)

    if _newclass:translation = staticmethod(translation)
    __swig_getmethods__["translation"] = lambda x: translation
    __swig_setmethods__["identity"] = _starsplatter.gTransfm_identity_set
    __swig_getmethods__["identity"] = _starsplatter.gTransfm_identity_get
    if _newclass:identity = _swig_property(_starsplatter.gTransfm_identity_get, _starsplatter.gTransfm_identity_set)
    def transpose_self(*args):
        """transpose_self(self)"""
        return _starsplatter.gTransfm_transpose_self(*args)

    def __mul__(*args):
        """
        __mul__(self, gTransfm a) -> gTransfm
        __mul__(self, gVector vec) -> gVector
        __mul__(self, gPoint pt) -> gPoint
        """
        return _starsplatter.gTransfm___mul__(*args)

    def dump(*args):
        """dump(self)"""
        return _starsplatter.gTransfm_dump(*args)

    def __eq__(*args):
        """__eq__(self, gTransfm other) -> int"""
        return _starsplatter.gTransfm___eq__(*args)

    def __ne__(*args):
        """__ne__(self, gTransfm other) -> int"""
        return _starsplatter.gTransfm___ne__(*args)

    __swig_destroy__ = _starsplatter.delete_gTransfm
    __del__ = lambda self : None;
gTransfm_swigregister = _starsplatter.gTransfm_swigregister
gTransfm_swigregister(gTransfm)

def gTransfm_scale(*args):
  """
    scale(float val) -> gTransfm
    gTransfm_scale(float xval, float yval, float zval) -> gTransfm
    """
  return _starsplatter.gTransfm_scale(*args)

def gTransfm_rotation(*args):
  """gTransfm_rotation(gVector axis, float angle) -> gTransfm"""
  return _starsplatter.gTransfm_rotation(*args)

def gTransfm_translation(*args):
  """gTransfm_translation(float x, float y, float z) -> gTransfm"""
  return _starsplatter.gTransfm_translation(*args)
cvar = _starsplatter.cvar

class gBoundBox(_object):
    """Proxy of C++ gBoundBox class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gBoundBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gBoundBox, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _starsplatter.delete_gBoundBox
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, float xin_llf, float yin_llf, float zin_llf, float xin_trb, 
            float yin_trb, float zin_trb) -> gBoundBox
        __init__(self) -> gBoundBox
        __init__(self, gBoundBox a) -> gBoundBox
        """
        this = _starsplatter.new_gBoundBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def inside(*args):
        """inside(self, gPoint pt) -> int"""
        return _starsplatter.gBoundBox_inside(*args)

    def intersect(*args):
        """intersect(self, gVector dir, gPoint origin, float mindist, float maxdist) -> int"""
        return _starsplatter.gBoundBox_intersect(*args)

    def __eq__(*args):
        """__eq__(self, gBoundBox other) -> int"""
        return _starsplatter.gBoundBox___eq__(*args)

    def __ne__(*args):
        """__ne__(self, gBoundBox other) -> int"""
        return _starsplatter.gBoundBox___ne__(*args)

    def union_with(*args):
        """union_with(self, gBoundBox a)"""
        return _starsplatter.gBoundBox_union_with(*args)

    def xmin(*args):
        """xmin(self) -> float"""
        return _starsplatter.gBoundBox_xmin(*args)

    def xmax(*args):
        """xmax(self) -> float"""
        return _starsplatter.gBoundBox_xmax(*args)

    def ymin(*args):
        """ymin(self) -> float"""
        return _starsplatter.gBoundBox_ymin(*args)

    def ymax(*args):
        """ymax(self) -> float"""
        return _starsplatter.gBoundBox_ymax(*args)

    def zmin(*args):
        """zmin(self) -> float"""
        return _starsplatter.gBoundBox_zmin(*args)

    def zmax(*args):
        """zmax(self) -> float"""
        return _starsplatter.gBoundBox_zmax(*args)

    def center(*args):
        """center(self) -> gPoint"""
        return _starsplatter.gBoundBox_center(*args)

    def wrap_together(*args):
        """
        wrap_together(self, gPoint pt, gPoint fixedPt) -> gPoint

        Both points are assumed to lie within the boundbox.  The box is treated
        as a region with periodic boundary conditions, and the returned point is
        the reflection of the first point which lies closest to the fixed 
        point.
        """
        return _starsplatter.gBoundBox_wrap_together(*args)

    def wrap(*args):
        """
        wrap(self, gPoint pt) -> gPoint

        The boundbox is treated as the boundary of a region with periodic
        boundary conditions.  The returned point is the reflection of the given point
        which lies inside the boundary.
        """
        return _starsplatter.gBoundBox_wrap(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _starsplatter.gBoundBox___str__(*args)

gBoundBox_swigregister = _starsplatter.gBoundBox_swigregister
gBoundBox_swigregister(gBoundBox)

class Camera(_object):
    """Proxy of C++ Camera class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, gPoint lookfm_in, gPoint lookat_in, gVector up_in, 
            double fovea_in, double hither_in, double yon_in, 
            int parallel_flag_in=0) -> Camera
        __init__(self, gPoint lookfm_in, gPoint lookat_in, gVector up_in, 
            double fovea_in, double hither_in, double yon_in) -> Camera
        """
        this = _starsplatter.new_Camera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _starsplatter.delete_Camera
    __del__ = lambda self : None;
    def frompt(*args):
        """frompt(self) -> gPoint"""
        return _starsplatter.Camera_frompt(*args)

    def atpt(*args):
        """atpt(self) -> gPoint"""
        return _starsplatter.Camera_atpt(*args)

    def updir(*args):
        """updir(self) -> gVector"""
        return _starsplatter.Camera_updir(*args)

    def pointing_dir(*args):
        """pointing_dir(self) -> gVector"""
        return _starsplatter.Camera_pointing_dir(*args)

    def fov(*args):
        """fov(self) -> double"""
        return _starsplatter.Camera_fov(*args)

    def hither_dist(*args):
        """hither_dist(self) -> double"""
        return _starsplatter.Camera_hither_dist(*args)

    def yon_dist(*args):
        """yon_dist(self) -> double"""
        return _starsplatter.Camera_yon_dist(*args)

    def view_dist(*args):
        """view_dist(self) -> double"""
        return _starsplatter.Camera_view_dist(*args)

    def parallel_proj(*args):
        """parallel_proj(self) -> int"""
        return _starsplatter.Camera_parallel_proj(*args)

    def set_parallel_proj(*args):
        """set_parallel_proj(self)"""
        return _starsplatter.Camera_set_parallel_proj(*args)

    def set_perspective_proj(*args):
        """set_perspective_proj(self)"""
        return _starsplatter.Camera_set_perspective_proj(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _starsplatter.Camera___str__(*args)

Camera_swigregister = _starsplatter.Camera_swigregister
Camera_swigregister(Camera)

class MousePosition(_object):
    """Proxy of C++ MousePosition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MousePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MousePosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _starsplatter.MousePosition_x_set
    __swig_getmethods__["x"] = _starsplatter.MousePosition_x_get
    if _newclass:x = _swig_property(_starsplatter.MousePosition_x_get, _starsplatter.MousePosition_x_set)
    __swig_setmethods__["y"] = _starsplatter.MousePosition_y_set
    __swig_getmethods__["y"] = _starsplatter.MousePosition_y_get
    if _newclass:y = _swig_property(_starsplatter.MousePosition_y_get, _starsplatter.MousePosition_y_set)
    __swig_setmethods__["maxx"] = _starsplatter.MousePosition_maxx_set
    __swig_getmethods__["maxx"] = _starsplatter.MousePosition_maxx_get
    if _newclass:maxx = _swig_property(_starsplatter.MousePosition_maxx_get, _starsplatter.MousePosition_maxx_set)
    __swig_setmethods__["maxy"] = _starsplatter.MousePosition_maxy_set
    __swig_getmethods__["maxy"] = _starsplatter.MousePosition_maxy_get
    if _newclass:maxy = _swig_property(_starsplatter.MousePosition_maxy_get, _starsplatter.MousePosition_maxy_set)
    def __init__(self, *args): 
        """__init__(self) -> MousePosition"""
        this = _starsplatter.new_MousePosition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _starsplatter.delete_MousePosition
    __del__ = lambda self : None;
MousePosition_swigregister = _starsplatter.MousePosition_swigregister
MousePosition_swigregister(MousePosition)

class CBall(_object):
    """Proxy of C++ CBall class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBall, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, void motion_callback_in, void cb_info_in, double scale_in=1.0) -> CBall
        __init__(self, void motion_callback_in, void cb_info_in) -> CBall
        """
        this = _starsplatter.new_CBall(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _starsplatter.delete_CBall
    __del__ = lambda self : None;
    def set_view(*args):
        """set_view(self, gTransfm new_viewmatrix)"""
        return _starsplatter.CBall_set_view(*args)

    def view(*args):
        """view(self) -> gTransfm"""
        return _starsplatter.CBall_view(*args)

    def getCumulativeViewTrans(*args):
        """getCumulativeViewTrans(self) -> gTransfm"""
        return _starsplatter.CBall_getCumulativeViewTrans(*args)

    def roll(*args):
        """roll(self, MousePosition mousedown, MousePosition mouseup)"""
        return _starsplatter.CBall_roll(*args)

    def slide(*args):
        """slide(self, MousePosition mousedown, MousePosition mouseup)"""
        return _starsplatter.CBall_slide(*args)

    def reset(*args):
        """reset(self)"""
        return _starsplatter.CBall_reset(*args)

    def set_scale(*args):
        """set_scale(self, double scale_in)"""
        return _starsplatter.CBall_set_scale(*args)

    def scale(*args):
        """scale(self) -> double"""
        return _starsplatter.CBall_scale(*args)

CBall_swigregister = _starsplatter.CBall_swigregister
CBall_swigregister(CBall)

class rgbImage(_object):
    """Proxy of C++ rgbImage class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgbImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgbImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int xin, int yin) -> rgbImage
        __init__(self, FILE fp, char filename) -> rgbImage
        """
        this = _starsplatter.new_rgbImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _starsplatter.delete_rgbImage
    __del__ = lambda self : None;
    def clear(*args):
        """clear(self, gBColor pix)"""
        return _starsplatter.rgbImage_clear(*args)

    def add_under(*args):
        """add_under(self, rgbImage other)"""
        return _starsplatter.rgbImage_add_under(*args)

    def add_over(*args):
        """add_over(self, rgbImage other)"""
        return _starsplatter.rgbImage_add_over(*args)

    def rescale_by_alpha(*args):
        """rescale_by_alpha(self)"""
        return _starsplatter.rgbImage_rescale_by_alpha(*args)

    def pix(*args):
        """pix(self, int i, int j) -> gBColor"""
        return _starsplatter.rgbImage_pix(*args)

    def nextpix(*args):
        """nextpix(self) -> gBColor"""
        return _starsplatter.rgbImage_nextpix(*args)

    def prevpix(*args):
        """prevpix(self) -> gBColor"""
        return _starsplatter.rgbImage_prevpix(*args)

    def xsize(*args):
        """xsize(self) -> int"""
        return _starsplatter.rgbImage_xsize(*args)

    def ysize(*args):
        """ysize(self) -> int"""
        return _starsplatter.rgbImage_ysize(*args)

    def valid(*args):
        """valid(self) -> int"""
        return _starsplatter.rgbImage_valid(*args)

    def save(*args):
        """save(self, char fname, char format) -> int"""
        return _starsplatter.rgbImage_save(*args)

    def compressed(*args):
        """compressed(self) -> int"""
        return _starsplatter.rgbImage_compressed(*args)

    def uncompress(*args):
        """uncompress(self)"""
        return _starsplatter.rgbImage_uncompress(*args)

rgbImage_swigregister = _starsplatter.rgbImage_swigregister
rgbImage_swigregister(rgbImage)

class StarBunch(_object):
    """Proxy of C++ StarBunch class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StarBunch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StarBunch, name)
    __repr__ = _swig_repr
    COLOR_ALG = _starsplatter.StarBunch_COLOR_ALG
    COLOR_PROP1 = _starsplatter.StarBunch_COLOR_PROP1
    COLOR_PROP2 = _starsplatter.StarBunch_COLOR_PROP2
    COLOR_PROP1_USE_LOG = _starsplatter.StarBunch_COLOR_PROP1_USE_LOG
    COLOR_PROP2_USE_LOG = _starsplatter.StarBunch_COLOR_PROP2_USE_LOG
    DEBUG_LEVEL = _starsplatter.StarBunch_DEBUG_LEVEL
    ATTRIBUTE_LAST = _starsplatter.StarBunch_ATTRIBUTE_LAST
    CM_CONSTANT = _starsplatter.StarBunch_CM_CONSTANT
    CM_COLORMAP_1D = _starsplatter.StarBunch_CM_COLORMAP_1D
    CM_COLORMAP_2D = _starsplatter.StarBunch_CM_COLORMAP_2D
    def __init__(self, *args): 
        """
        __init__(self, int nstars_in=0) -> StarBunch
        __init__(self) -> StarBunch
        """
        this = _starsplatter.new_StarBunch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _starsplatter.delete_StarBunch
    __del__ = lambda self : None;
    def set_attr(*args):
        """set_attr(self, int whichAttr, int val)"""
        return _starsplatter.StarBunch_set_attr(*args)

    def attr(*args):
        """attr(self, int whichAttr) -> int"""
        return _starsplatter.StarBunch_attr(*args)

    def load_ascii_xyzxyz(*args):
        """load_ascii_xyzxyz(self, FILE infile) -> int"""
        return _starsplatter.StarBunch_load_ascii_xyzxyz(*args)

    def load_raw_xyzxyz(*args):
        """load_raw_xyzxyz(self, FILE infile) -> int"""
        return _starsplatter.StarBunch_load_raw_xyzxyz(*args)

    def load_ascii_xyzdkxyzdk(*args):
        """load_ascii_xyzdkxyzdk(self, FILE infile) -> int"""
        return _starsplatter.StarBunch_load_ascii_xyzdkxyzdk(*args)

    def load_raw_xyzdkxyzdk(*args):
        """load_raw_xyzdkxyzdk(self, FILE infile) -> int"""
        return _starsplatter.StarBunch_load_raw_xyzdkxyzdk(*args)

    def set_nstars(*args):
        """set_nstars(self, int nstars_in)"""
        return _starsplatter.StarBunch_set_nstars(*args)

    def set_nprops(*args):
        """set_nprops(self, int nprops_in)"""
        return _starsplatter.StarBunch_set_nprops(*args)

    def nprops(*args):
        """nprops(self) -> int"""
        return _starsplatter.StarBunch_nprops(*args)

    def set_bunch_color(*args):
        """set_bunch_color(self, gColor clr_in)"""
        return _starsplatter.StarBunch_set_bunch_color(*args)

    def set_time(*args):
        """set_time(self, double time_in)"""
        return _starsplatter.StarBunch_set_time(*args)

    def set_z(*args):
        """
        set_z(self, double z_in)

        This is the cosmological redshift z, or zero for non-cosmological simulations
        """
        return _starsplatter.StarBunch_set_z(*args)

    def set_a(*args):
        """
        set_a(self, double a_in)

        This is the cosmological scale factor a, or zero for non-cosmological simulations
        """
        return _starsplatter.StarBunch_set_a(*args)

    def nstars(*args):
        """nstars(self) -> int"""
        return _starsplatter.StarBunch_nstars(*args)

    def boundBox(*args):
        """boundBox(self) -> gBoundBox"""
        return _starsplatter.StarBunch_boundBox(*args)

    def bunch_color(*args):
        """bunch_color(self) -> gColor"""
        return _starsplatter.StarBunch_bunch_color(*args)

    def time(*args):
        """time(self) -> double"""
        return _starsplatter.StarBunch_time(*args)

    def z(*args):
        """
        z(self) -> double

        This is the cosmological redshift z, or zero for non-cosmological simulations
        """
        return _starsplatter.StarBunch_z(*args)

    def a(*args):
        """
        a(self) -> double

        This is the cosmological scale factor a, or zero for non-cosmological simulations
        """
        return _starsplatter.StarBunch_a(*args)

    def dump(*args):
        """
        dump(self, FILE ofile, int dump_coords=0)
        dump(self, FILE ofile)
        """
        return _starsplatter.StarBunch_dump(*args)

    def has_ids(*args):
        """has_ids(self) -> int"""
        return _starsplatter.StarBunch_has_ids(*args)

    def has_valids(*args):
        """has_valids(self) -> int"""
        return _starsplatter.StarBunch_has_valids(*args)

    def has_per_part_densities(*args):
        """has_per_part_densities(self) -> int"""
        return _starsplatter.StarBunch_has_per_part_densities(*args)

    def has_per_part_exp_constants(*args):
        """has_per_part_exp_constants(self) -> int"""
        return _starsplatter.StarBunch_has_per_part_exp_constants(*args)

    def ninvalid(*args):
        """ninvalid(self) -> int"""
        return _starsplatter.StarBunch_ninvalid(*args)

    def set_coords(*args):
        """set_coords(self, int i, gPoint pt)"""
        return _starsplatter.StarBunch_set_coords(*args)

    def coords(*args):
        """coords(self, int i) -> gPoint"""
        return _starsplatter.StarBunch_coords(*args)

    def set_prop(*args):
        """set_prop(self, int iStar, int iProp, double value)"""
        return _starsplatter.StarBunch_set_prop(*args)

    def prop(*args):
        """prop(self, int iStar, int iProp) -> double"""
        return _starsplatter.StarBunch_prop(*args)

    def set_propName(*args):
        """set_propName(self, int iProp, char name)"""
        return _starsplatter.StarBunch_set_propName(*args)

    def propName(*args):
        """propName(self, int iProp) -> char"""
        return _starsplatter.StarBunch_propName(*args)

    def clr(*args):
        """clr(self, int i) -> gColor"""
        return _starsplatter.StarBunch_clr(*args)

    def id(*args):
        """id(self, int i) -> long"""
        return _starsplatter.StarBunch_id(*args)

    def set_valid(*args):
        """set_valid(self, int i, int validFlag)"""
        return _starsplatter.StarBunch_set_valid(*args)

    def valid(*args):
        """valid(self, int i) -> unsigned int"""
        return _starsplatter.StarBunch_valid(*args)

    def set_id(*args):
        """set_id(self, int i, long val)"""
        return _starsplatter.StarBunch_set_id(*args)

    def density(*args):
        """
        density(self) -> double
        density(self, int i) -> double
        """
        return _starsplatter.StarBunch_density(*args)

    def set_density(*args):
        """
        set_density(self, double dens_in)
        set_density(self, int i, double val)
        """
        return _starsplatter.StarBunch_set_density(*args)

    def exp_constant(*args):
        """
        exp_constant(self) -> double
        exp_constant(self, int i) -> double
        """
        return _starsplatter.StarBunch_exp_constant(*args)

    def set_exp_constant(*args):
        """
        set_exp_constant(self, double exp_const_in)
        set_exp_constant(self, int i, double val)
        """
        return _starsplatter.StarBunch_set_exp_constant(*args)

    def scale_length(*args):
        """
        scale_length(self) -> double
        scale_length(self, int i) -> double
        """
        return _starsplatter.StarBunch_scale_length(*args)

    def set_scale_length(*args):
        """
        set_scale_length(self, double scale_length_in)
        set_scale_length(self, int i, double val)
        """
        return _starsplatter.StarBunch_set_scale_length(*args)

    def set_colormap1D(*args):
        """set_colormap1D(self, gColor colors, double min, double max)"""
        return _starsplatter.StarBunch_set_colormap1D(*args)

    def set_colormap2D(*args):
        """
        set_colormap2D(self, gColor colors, double minX, double maxX, double minY, 
            double maxY)
        """
        return _starsplatter.StarBunch_set_colormap2D(*args)

    def crop(*args):
        """crop(self, gPoint pt, gVector dir)"""
        return _starsplatter.StarBunch_crop(*args)

    def sort_ascending_by_prop(*args):
        """sort_ascending_by_prop(self, int iProp) -> int"""
        return _starsplatter.StarBunch_sort_ascending_by_prop(*args)

    def sort_ascending_by_id(*args):
        """sort_ascending_by_id(self) -> int"""
        return _starsplatter.StarBunch_sort_ascending_by_id(*args)

    def allocate_next_free_prop_index(*args):
        """allocate_next_free_prop_index(self, char name) -> int"""
        return _starsplatter.StarBunch_allocate_next_free_prop_index(*args)

    def deallocate_prop_index(*args):
        """deallocate_prop_index(self, int iProp)"""
        return _starsplatter.StarBunch_deallocate_prop_index(*args)

    def copy_stars(*args):
        """copy_stars(self, StarBunch src) -> int"""
        return _starsplatter.StarBunch_copy_stars(*args)

    def fill_invalid_from(*args):
        """
        fill_invalid_from(self, StarBunch src, int sorted=0, int src_sorted=0) -> int
        fill_invalid_from(self, StarBunch src, int sorted=0) -> int
        fill_invalid_from(self, StarBunch src) -> int
        """
        return _starsplatter.StarBunch_fill_invalid_from(*args)

    def get_prop_index_by_name(*args):
        """get_prop_index_by_name(self, char name) -> int"""
        return _starsplatter.StarBunch_get_prop_index_by_name(*args)

    def wrap_periodic(*args):
        """wrap_periodic(self, gBoundBox newWorldBBox)"""
        return _starsplatter.StarBunch_wrap_periodic(*args)

StarBunch_swigregister = _starsplatter.StarBunch_swigregister
StarBunch_swigregister(StarBunch)
StarBunch.PER_PARTICLE_DENSITIES_PROP_NAME = _starsplatter.cvar.StarBunch_PER_PARTICLE_DENSITIES_PROP_NAME
StarBunch.PER_PARTICLE_SQRT_EXP_CONSTANTS_PROP_NAME = _starsplatter.cvar.StarBunch_PER_PARTICLE_SQRT_EXP_CONSTANTS_PROP_NAME
StarBunch.ID_PROP_NAME = _starsplatter.cvar.StarBunch_ID_PROP_NAME
StarBunch.VALID_PROP_NAME = _starsplatter.cvar.StarBunch_VALID_PROP_NAME
StarBunch.VEL_X_NAME = _starsplatter.cvar.StarBunch_VEL_X_NAME
StarBunch.VEL_Y_NAME = _starsplatter.cvar.StarBunch_VEL_Y_NAME
StarBunch.VEL_Z_NAME = _starsplatter.cvar.StarBunch_VEL_Z_NAME


def load_tipsy_box_ascii(*args):
  """load_tipsy_box_ascii(FILE infile, StarBunch gas, StarBunch stars, StarBunch dark) -> int"""
  return _starsplatter.load_tipsy_box_ascii(*args)

def load_dubinski(*args):
  """load_dubinski(FILE infile, StarBunch sbunch_tbl, int OUTPUT) -> int"""
  return _starsplatter.load_dubinski(*args)

def load_dubinski_raw(*args):
  """load_dubinski_raw(FILE infile, StarBunch sbunch_tbl, int OUTPUT) -> int"""
  return _starsplatter.load_dubinski_raw(*args)

def load_gadget(*args):
  """
    load_gadget(infile, [gasBunch,haloBunch,diskBunch,bulgeBunch,bndryBunch]) -> ( int, int )

    Returned tuple is ( success, nBunchesRead ), where success is nonzero 
    when the file was loaded successfully.  If the file is not loaded 
    successfully, RuntimeError is raised.
    """
  return _starsplatter.load_gadget(*args)

def identify_unshared_ids(*args):
  """identify_unshared_ids(StarBunch sb1, StarBunch sb2) -> int"""
  return _starsplatter.identify_unshared_ids(*args)
class StarSplatter(_object):
    """Proxy of C++ StarSplatter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StarSplatter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StarSplatter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> StarSplatter"""
        this = _starsplatter.new_StarSplatter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _starsplatter.delete_StarSplatter
    __del__ = lambda self : None;
    ET_LINEAR = _starsplatter.StarSplatter_ET_LINEAR
    ET_LOG = _starsplatter.StarSplatter_ET_LOG
    ET_LOG_AUTO = _starsplatter.StarSplatter_ET_LOG_AUTO
    ET_LOG_HSV = _starsplatter.StarSplatter_ET_LOG_HSV
    ET_LOG_HSV_AUTO = _starsplatter.StarSplatter_ET_LOG_HSV_AUTO
    ET_NOOPAC_LINEAR = _starsplatter.StarSplatter_ET_NOOPAC_LINEAR
    ET_NOOPAC_LOG = _starsplatter.StarSplatter_ET_NOOPAC_LOG
    ET_NOOPAC_LOG_AUTO = _starsplatter.StarSplatter_ET_NOOPAC_LOG_AUTO
    ET_NOOPAC_LOG_HSV = _starsplatter.StarSplatter_ET_NOOPAC_LOG_HSV
    ET_NOOPAC_LOG_HSV_AUTO = _starsplatter.StarSplatter_ET_NOOPAC_LOG_HSV_AUTO
    ET_LUPTON = _starsplatter.StarSplatter_ET_LUPTON
    ET_LATE_CMAP_R = _starsplatter.StarSplatter_ET_LATE_CMAP_R
    ET_LATE_CMAP_A = _starsplatter.StarSplatter_ET_LATE_CMAP_A
    ET_LATE_CMAP_LOG_R = _starsplatter.StarSplatter_ET_LATE_CMAP_LOG_R
    ET_LATE_CMAP_LOG_A = _starsplatter.StarSplatter_ET_LATE_CMAP_LOG_A
    ET_LATE_CMAP_LOG_R_AUTO = _starsplatter.StarSplatter_ET_LATE_CMAP_LOG_R_AUTO
    ET_LATE_CMAP_LOG_A_AUTO = _starsplatter.StarSplatter_ET_LATE_CMAP_LOG_A_AUTO
    SPLAT_GAUSSIAN = _starsplatter.StarSplatter_SPLAT_GAUSSIAN
    SPLAT_SPLINE = _starsplatter.StarSplatter_SPLAT_SPLINE
    SPLAT_GLYPH_CIRCLE = _starsplatter.StarSplatter_SPLAT_GLYPH_CIRCLE
    def set_image_dims(*args):
        """set_image_dims(self, int xsize_in, int ysize_in)"""
        return _starsplatter.StarSplatter_set_image_dims(*args)

    def set_camera(*args):
        """set_camera(self, Camera cam_in)"""
        return _starsplatter.StarSplatter_set_camera(*args)

    def set_transform(*args):
        """set_transform(self, gTransfm trans_in)"""
        return _starsplatter.StarSplatter_set_transform(*args)

    def clear_stars(*args):
        """clear_stars(self)"""
        
	ren= args[0]
        ren.liveBunches= []

        return _starsplatter.StarSplatter_clear_stars(*args)

    def add_stars(*args):
        """add_stars(self, StarBunch sbunch_in)"""
        val = _starsplatter.StarSplatter_add_stars(*args)
        
	ren= args[0]
	sb= args[1]
        if not hasattr(ren,"liveBunches"): ren.liveBunches= []
        ren.liveBunches.append(sb)

        return val

    def render(*args):
        """render(self) -> rgbImage"""
        return _starsplatter.StarSplatter_render(*args)

    def render_points(*args):
        """render_points(self) -> rgbImage"""
        return _starsplatter.StarSplatter_render_points(*args)

    def image_xsize(*args):
        """image_xsize(self) -> int"""
        return _starsplatter.StarSplatter_image_xsize(*args)

    def image_ysize(*args):
        """image_ysize(self) -> int"""
        return _starsplatter.StarSplatter_image_ysize(*args)

    def splat_cutoff_frac(*args):
        """splat_cutoff_frac(self) -> double"""
        return _starsplatter.StarSplatter_splat_cutoff_frac(*args)

    def set_splat_cutoff_frac(*args):
        """set_splat_cutoff_frac(self, double val_in)"""
        return _starsplatter.StarSplatter_set_splat_cutoff_frac(*args)

    def transform(*args):
        """transform(self) -> gTransfm"""
        return _starsplatter.StarSplatter_transform(*args)

    def camera_set(*args):
        """camera_set(self) -> int"""
        return _starsplatter.StarSplatter_camera_set(*args)

    def camera(*args):
        """camera(self) -> Camera"""
        return _starsplatter.StarSplatter_camera(*args)

    def dump(*args):
        """dump(self, FILE ofile)"""
        return _starsplatter.StarSplatter_dump(*args)

    def set_debug(*args):
        """set_debug(self, int flag)"""
        return _starsplatter.StarSplatter_set_debug(*args)

    def debug(*args):
        """debug(self) -> int"""
        return _starsplatter.StarSplatter_debug(*args)

    def set_exposure_type(*args):
        """set_exposure_type(self, ExposureType type)"""
        return _starsplatter.StarSplatter_set_exposure_type(*args)

    def get_exposure_type(*args):
        """get_exposure_type(self) -> ExposureType"""
        return _starsplatter.StarSplatter_get_exposure_type(*args)

    def set_log_rescale_bounds(*args):
        """set_log_rescale_bounds(self, double min_in, double max_in)"""
        return _starsplatter.StarSplatter_set_log_rescale_bounds(*args)

    def get_log_rescale_bounds(*args):
        """get_log_rescale_bounds(self, double min_out, double max_out) -> void"""
        return _starsplatter.StarSplatter_get_log_rescale_bounds(*args)

    def set_late_colormap(*args):
        """set_late_colormap(self, gColor colors, double min, double max)"""
        return _starsplatter.StarSplatter_set_late_colormap(*args)

    def exposure_scale(*args):
        """exposure_scale(self) -> double"""
        return _starsplatter.StarSplatter_exposure_scale(*args)

    def set_exposure_scale(*args):
        """set_exposure_scale(self, double scale_in)"""
        return _starsplatter.StarSplatter_set_exposure_scale(*args)

    def splat_type(*args):
        """splat_type(self) -> SplatType"""
        return _starsplatter.StarSplatter_splat_type(*args)

    def set_splat_type(*args):
        """set_splat_type(self, SplatType splatType)"""
        return _starsplatter.StarSplatter_set_splat_type(*args)

StarSplatter_swigregister = _starsplatter.StarSplatter_swigregister
StarSplatter_swigregister(StarSplatter)

def starbunch_interpolate(*args):
  """
    starbunch_interpolate(StarBunch sb1, StarBunch sb2, double time, double vel_scale, 
        int sb1_sorted=0, int sb2_sorted=0) -> StarBunch
    starbunch_interpolate(StarBunch sb1, StarBunch sb2, double time, double vel_scale, 
        int sb1_sorted=0) -> StarBunch
    starbunch_interpolate(StarBunch sb1, StarBunch sb2, double time, double vel_scale) -> StarBunch

    vel_scale is a factor to adjust units between positions and velocities.
    For example, if positions are in kiloparsecs, velocities are in
    kilometers per second and times are in seconds, vel_scale would be
    1.0/(30.86e15).

    """
  return _starsplatter.starbunch_interpolate(*args)

def starbunch_interpolate_periodic_bc(*args):
  """
    starbunch_interpolate_periodic_bc(StarBunch sb1, StarBunch sb2, double time, double vel_scale, 
        gBoundBox worldBB, int sb1_sorted=0, 
        int sb2_sorted=0) -> StarBunch
    starbunch_interpolate_periodic_bc(StarBunch sb1, StarBunch sb2, double time, double vel_scale, 
        gBoundBox worldBB, int sb1_sorted=0) -> StarBunch
    starbunch_interpolate_periodic_bc(StarBunch sb1, StarBunch sb2, double time, double vel_scale, 
        gBoundBox worldBB) -> StarBunch

    vel_scale is a factor to adjust units between positions and velocities.
    For example, if positions are in kiloparsecs, velocities are in
    kilometers per second and times are in seconds, vel_scale would be
    1.0/(30.86e15).

    """
  return _starsplatter.starbunch_interpolate_periodic_bc(*args)



